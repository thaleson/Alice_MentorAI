import streamlit as st
import random
import time
from app.interfaces.llm_interface import ask_llm
import streamlit_cookies_manager as cookie_manager
from PyPDF2 import PdfReader
import docx


st.set_page_config(page_title="Revis√£o Inteligente", page_icon="üìö")

# Configura√ß√£o da p√°gina

st.title("üß† Alice Revisa, IA para Revis√£o de Concursos")

# Inicializa√ß√£o do estado da sess√£o
if "progress" not in st.session_state:
    st.session_state.progress = 0
if "cookie_initialized" not in st.session_state:
    st.session_state.cookie_initialized = False
if "user_name" not in st.session_state:
    st.session_state.user_name = "Usu√°rio"
if "long_term_goals" not in st.session_state:
    st.session_state.long_term_goals = []
if "daily_goal" not in st.session_state:
    st.session_state.daily_goal = 1

# ‚ûï Adicione aqui
if "messages" not in st.session_state:
    st.session_state.messages = []

if "interactions" not in st.session_state:
    st.session_state.interactions = 0


# Inicializa√ß√£o do Cookie Manager
cookies = cookie_manager.CookieManager()

def load_progress():
    if not cookies.ready():
        return st.session_state.progress
    try:
        progress_str = cookies.get("progress")
        if progress_str is not None:
            return int(progress_str)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erro ao carregar cookies: {str(e)}")
    return st.session_state.progress

def save_progress(progress_value):
    if cookies.ready():
        try:
            cookies["progress"] = str(progress_value)
            cookies.save()
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro ao salvar cookies: {str(e)}")

if not cookies.ready():
    if not st.session_state.cookie_initialized:
        st.warning('‚ö†Ô∏è Aguardando inicializa√ß√£o dos cookies...')
        time.sleep(1)
        st.session_state.cookie_initialized = True
        st.experimental_rerun()
    progress = st.session_state.progress
else:
    progress = load_progress()

# Estilo
try:
    with open("static/styles.css") as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
except FileNotFoundError:
    st.warning("Arquivo de estilo CSS n√£o encontrado!")

# Dica de estudo
study_tips = [
    "üí° Fa√ßa revis√µes espa√ßadas: reveja o conte√∫do em 1, 7 e 30 dias.",
    "üìö Divida grandes resumos em partes menores e revise aos poucos.",
    "üß† Ensine o conte√∫do para algu√©m fict√≠cio (T√©cnica de Feynman).",
    "üéß Grave resumos em √°udio e escute no transporte.",
    "üìù Use flashcards com perguntas objetivas e respostas curtas.",
    "üéØ Revise os erros mais frequentes para fixar melhor.",
    "üìÖ Use a t√©cnica Pomodoro para manter foco e descansar.",
    "üìå Ao revisar, tente lembrar antes de reler.",
    "ü§î Fa√ßa perguntas sobre o conte√∫do: o qu√™? como? por qu√™?"
]
st.sidebar.markdown("### üí° Dica de Estudo")
st.sidebar.info(random.choice(study_tips))

# Progresso
st.sidebar.markdown("### üìà Progresso de Estudo")
st.sidebar.progress(progress / 100)
st.sidebar.write(f"{progress}% conclu√≠do")




# Upload de arquivos
st.markdown("### üìÇ Envie seu resumo para sugest√£o autom√°tica")
uploaded_file = st.file_uploader("Escolha um arquivo (.pdf, .txt, .docx)", type=["pdf", "txt", "docx"])
extracted_text = ""

if uploaded_file:
    file_type = uploaded_file.name.split('.')[-1]
    if file_type == "pdf":
        reader = PdfReader(uploaded_file)
        extracted_text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
    elif file_type == "txt":
        extracted_text = uploaded_file.read().decode("utf-8")
    elif file_type == "docx":
        doc = docx.Document(uploaded_file)
        extracted_text = "\n".join([para.text for para in doc.paragraphs])
    
    st.markdown("#### üìù Conte√∫do Extra√≠do:")
    st.text_area("Conte√∫do extra√≠do do arquivo:", extracted_text, height=200)

    if len(extracted_text.split()) > 200:
        st.info("üîç Conte√∫do longo detectado. Gerando resumo antes de sugerir m√©todo de revis√£o...")
        with st.spinner("Resumindo conte√∫do..."):
            summary_prompt = f"Resuma o seguinte conte√∫do de forma objetiva e clara para fins de revis√£o de concursos:\n\n{extracted_text}"
            extracted_text = ask_llm(summary_prompt)
        st.success("‚úÖ Resumo gerado automaticamente:")
        st.text_area("Resumo:", extracted_text, height=200)

st.markdown("""
Digite seu resumo ou conte√∫do de estudo.  
A IA ir√° indicar o **melhor m√©todo de revis√£o**: flashcards, mapas mentais, quest√µes, etc.
""")

tone = st.selectbox("üéØ Escolha o tom da resposta da IA:", ["T√©cnico", "Motivacional", "Divertido"])

# Hist√≥rico
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input manual ou de upload
prompt = st.chat_input("Digite seu conte√∫do de estudo aqui...") or (extracted_text if extracted_text else "")

if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    tone_prompt = {
        "T√©cnico": "Responda com uma an√°lise objetiva e fundamentada em m√©todos de aprendizado eficazes para concursos.",
        "Motivacional": "Responda com energia positiva, incentivando a pessoa e indicando m√©todos eficazes de revis√£o.",
        "Divertido": "Responda com bom humor, mantendo a clareza, e recomende formas divertidas de revisar o conte√∫do."
    }[tone]

    full_prompt = f"{tone_prompt}\n\nConte√∫do:\n{prompt}"

    with st.chat_message("assistant"):
        with st.spinner("‚öôÔ∏è Processando seu material com foco em m√©todos de revis√£o eficientes..."):
            response = ask_llm(full_prompt)
            st.markdown(f"**Alice Revisa:** {response}")

    # Feedback adaptativo
    feedback_prompt = f"""
    Usu√°rio est√° revisando conte√∫dos para concursos.
    O progresso de estudo √© de {progress}%. 
    As intera√ß√µes at√© agora s√£o {st.session_state.interactions}.
    Forne√ßa um feedback adaptativo com base no progresso e nas intera√ß√µes.
    """
    feedback_response = ask_llm(feedback_prompt)
    st.markdown(f"**Feedback da IA:** {feedback_response}")

    st.session_state.messages.append({"role": "assistant", "content": response})
    st.session_state.interactions += 1
    progress = min(st.session_state.interactions * 10, 100)

    if progress == 100:
        st.success("üéâ Parab√©ns! Voc√™ completou a revis√£o! üéâ")
        st.session_state.interactions = 0
        progress = 0

    save_progress(progress)

